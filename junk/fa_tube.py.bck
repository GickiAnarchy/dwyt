#!etc/bin/python3.10

import os
import datetime
from pytube import YouTube, Search
from yt_dlp import YoutubeDL

from kivy.uix.label import Label
from kivy.uix.image import Image, AsyncImage

from kivy.properties import BooleanProperty,ObjectProperty
from kivy.logger import Logger


''' Global Variables '''
global TRACK_7
TRACK_7 = "https://youtu.be/R44K3tUFh60"


'''
    <Tube>:
        Takes in a pytube object and prepares it for kivy gui.
        
        -It can be empty/blank meaning it doesn't need a pytube object to initiate.
'''
class Tube:
    def __init__(self, yt = None):
        if yt is not None and "https://" in str(yt):
            try:
                self.yt = YouTube(yt)
            except Exception as e:
                Logger.error("ERROR IN TUBE INIT\n" + str(e))
                return False
            self.isEmpty = False
            self.fill_data()
            Logger.info("Tube created with YouTube")
        if yt in (None, ""):
            self.yt = None
            self.isEmpty = True
            Logger.info("Tube created empty")


    def fill_data(self):
        if self.isEmpty:
            Logger.warning("Tube is empty cannot fill_data.")
            return False
        if not self.isEmpty:
            """ Tubes string properties"""
            self.title = self.yt.title                                    # TITLE
            self.author = self.yt.author                                  # AUTHOR (CHANNEL)
            self.description = self.yt.description                        # VIDEO DESCRIPTION
            """ Tubes url properties"""
            self.video_url = self.yt.watch_url                            # VIDEO URL
            self.thumbnail = self.yt.thumbnail_url                        # VIDEO THUMBNAIL URL
            """ Tubes numeric properties"""
            self.views = self.yt.views                                    # VIDEO VIEW COUNT
            self.length = self.yt.length                                  # VIDEO LENGTH
            self.publish_date = self.yt.publish_date                      # DATE VIDEO WAS PUBLISHED


    """ Tubes property setters, getters, and kivy object getters """
    #   Kivy Object property getters
    def get_kv_title(self):
        if self.title is None:
            return False
        ret = Label(text = self.title)
        return ret
    def get_kv_author(self):
        if self.author is None:
            return False
        ret = Label(text = self.author)
        return ret
    def get_kv_description(self):
        if self.description in ("", None):
            return False
        ret = Label(text = self.title)
        return ret
    def get_kv_length(self):
        if self.length is None:
            return False
        ret = Label(text = str(format(self.length / 60, ".2f")))
        return ret
    def get_kv_publish_date(self):
        if self.publish_date is None:
            return False
        ret = Label(text = str(datetime.datetime.date(self.publish_date)))
        return ret
    def get_kv_views(self):
        if self.views is None:
            return False
        ret = Label(text = str(self.length))
        return ret
    def get_kv_thumbnail(self):
        if self.thumbnail is None:
            return False
        ret = AsyncImage(source = self.thumbnail)
        return ret

    #   Tube Object property getters and setters
    @property
    def isEmpty(self):
        return self._isEmpty
    @isEmpty.setter
    def isEmpty(self, new_empty):
        self._isEmpty = new_empty
    @property
    def title(self):
        return self._title
    @title.setter
    def title(self, new_title):
        self._title = new_title
    @property
    def author(self):
        return self._author
    @author.setter
    def author(self, new_author):
        self._author = new_author
    @property
    def description(self):
        return self._description
    @description.setter
    def description(self, new_description):
        self._description = new_description
    @property
    def video_url(self):
        return self._video_url
    @video_url.setter
    def video_url(self, new_video_url):
        self._video_url = new_video_url
    @property
    def thumbnail(self):
        return self._thumbnail
    @thumbnail.setter
    def thumbnail(self, new_thumbnail):
        self._thumbnail = new_thumbnail
    @property
    def views(self):
        return self._views
    @views.setter
    def views(self, new_views):
        self._views = new_views
    @property
    def length(self):
        return self._length
    @length.setter
    def length(self, new_length):
        self._length = new_length
    @property
    def publish_date(self):
        return self._publish_date
    @publish_date.setter
    def publish_date(self, new_publish_date):
        self._publish_date = new_publish_date



''' end of class '''

if __name__ == "__main__":
    #TODO:
    #   -Each script has 'if name is main' for testing reasons
    #   -Add scripts testing functions here
    pass